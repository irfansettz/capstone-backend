version: '3'

services:
  # app
  gateway-service:
    image: 'gateway-service:latest'
    container_name: gateway-service
    build:
      context: gateway-service
      dockerfile: Dockerfile
    environment:
      - spring.jpa.show-sql=true
    expose:
      - "8080"
    ports:
      - "8080:8080"
  auth-service:
    image: 'auth-service:latest'
    container_name: auth-service
    build:
      context: auth-service
      dockerfile: Dockerfile
    depends_on:
      - user-db
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://user-db:5432/user_db
      - SPRING_DATASOURCE_USERNAME=capstone
      - SPRING_DATASOURCE_PASSWORD=12345678
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - spring.jpa.show-sql=true
      - SERVER_PORT=8081
    expose:
      - "8081"
    ports:
      - "8081:8081"
  management-user-service:
    image: 'management-user-service:latest'
    container_name: management-user-service
    build:
      context: management-user-service
      dockerfile: Dockerfile
    depends_on:
      - user-db
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://user-db:5432/user_db
      - SPRING_DATASOURCE_USERNAME=capstone
      - SPRING_DATASOURCE_PASSWORD=12345678
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - spring.jpa.show-sql=true
      - SERVER_PORT=8082
    expose:
      - "8082"
    ports:
      - "8082:8082"
  item-service:
    image: 'item-service:latest'
    container_name: item-service
    build:
      context: item-service
      dockerfile: Dockerfile
    depends_on:
      - request-db
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://request-db:3306/request_db
      - SPRING_DATASOURCE_USERNAME=capstone
      - SPRING_DATASOURCE_PASSWORD=12345678
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - spring.jpa.show-sql=true
      - SERVER_PORT=8083
    expose:
      - "8083"
    ports:
      - "8083:8083"
  request-service:
    image: 'request-service:latest'
    container_name: request-service
    build:
      context: request-service
      dockerfile: Dockerfile
    depends_on:
      - request-db
      - cache-redis-db
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://request-db:3306/request_db
      - SPRING_DATASOURCE_USERNAME=capstone
      - SPRING_DATASOURCE_PASSWORD=12345678
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - spring.jpa.show-sql=true
      - SERVER_PORT=8084
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
      - SPRING_RABBITMQ_VIRTUAL-host=
    expose:
      - "8084"
    ports:
      - "8084:8084"
  approval-service:
    image: 'approval-service:latest'
    container_name: approval-service
    build:
      context: approval-service
      dockerfile: Dockerfile
    depends_on:
      - request-db
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://request-db:3306/request_db
      - SPRING_DATASOURCE_USERNAME=capstone
      - SPRING_DATASOURCE_PASSWORD=12345678
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - spring.jpa.show-sql=true
      - SERVER_PORT=8085
    expose:
      - "8085"
    ports:
      - "8085:8085"
  message-broker-service:
    image: 'message-broker-service:latest'
    container_name: message-broker-service
    build:
      context: message-broker-service
      dockerfile: Dockerfile
    networks:
      - msg-broker
#  notification-service:
#    image: 'notification-service:latest'
#    container_name: notification-service
#    build:
#      context: notification-service
#      dockerfile: Dockerfile
#    depends_on:
##      - rabbitmq
#      - message-broker-service
#    networks:
#      - msg-broker
#    environment:
#      - spring.mail.host=smtp.gmail.com
#      - spring.mail.port=587
#      - spring.mail.username=ikonpms@gmail.com
#      - spring.mail.password=jjgritwumqdzqlvd
#      - spring.mail.properties.mail.debug=true
#      - spring.mail.properties.mail.transport.protocol=smtp
#      - spring.mail.properties.mail.smtp.auth=true
#      - spring.mail.properties.mail.smtp.starttls.enable=true
#      - server.port=8086
#    expose:
#      - "8086"
#    ports:
#      - "8086:8086"
  chat-service:
    image: 'chat-service:latest'
    container_name: chat-service
    build:
      context: chat-service
      dockerfile: Dockerfile
    environment:
      - server.port=8087
    expose:
      - "8087"
    ports:
      - "8087:8087"
  cache-redis-db:
    image: redis:6.2-alpine
    container_name: cache-redis-db
    restart: always
    ports:
      - '6379:6379'
    volumes:
      - cache_redis_db:/data
  rabbitmq:
    image: rabbitmq:3.9.11-management-alpine
    container_name: 'rabbitmq-local'
    expose:
      - "15672"
      - "5672"
    ports:
      - "5673:5672"
      - "15673:15672"
    networks:
      - msg-broker
    volumes:
      - rabbit_mq1:/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - rabbit_mq2:/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
  # databases
  user-db:
    image: 'postgres:15-alpine'
    container_name: user-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=capstone
      - POSTGRES_PASSWORD=12345678
      - POSTGRES_DB=user_db
    volumes:
      - user_db:/var/lib/postgresql/data
    expose:
      - "5432"
    ports:
      - "5432:5432"
  request-db:
    image: mysql:latest
    container_name: request-db
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 12345678
      MYSQL_USER: capstone
      MYSQL_PASSWORD: 12345678
      MYSQL_DATABASE: request_db
    volumes:
      - request_db:/var/lib/mysql
    expose:
      - "3306"
    ports:
      - "3306:3306"

networks:
  msg-broker:
      
volumes:
  user_db:
  request_db:
  cache_redis_db:
  rabbit_mq1:
  rabbit_mq2:



